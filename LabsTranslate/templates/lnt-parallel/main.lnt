function canProceed(id:ID, I:Iface, pc:PC{%-if hasStigmergy-%}, L : Lstig{%endif%}{%if hasEnvironment%}, E: Env{%endif%}): Bool is
    return ({%- for item in schedule -%}
        ({% for pc in item.entry -%}(pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
        {%-for pc in item.siblings -%}
        (pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
        {%- endfor -%}
        {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %})
        {% unless forloop.last -%} or {%- endunless -%}
        {%- endfor -%})
end function

process agent [tick, doInit:IDchannel, attr: any{%if hasStigmergy%}, put, qry, l, refresh, request : any, signalPut, signalQry:IDchannel{%endif%}{%if hasEnvironment%}, getenv, setenv:any{%endif%}] (id : ID) is
    var I : Iface, pc : PC{%-if hasStigmergy-%}, L : Lstig, Zput, Zqry : Pending{%endif%}{%if hasEnvironment%}, E: Env{%endif%} in

    doInit(id);
    {%if hasStigmergy%}
    Zput := Pending (false);
    Zqry := Pending (false);
    {%endif%}
    INITAGENT[attr{%if hasStigmergy%}, l, refresh{%endif%}] (id, ?I, ?pc{%-if hasStigmergy-%}, ?L{%-endif-%});
    doInit(id);

    loop
      select
            only if (empty (Zput) and empty (Zqry)) then
                {%if hasEnvironment%}goodEnv(?E); getenv(E);{%endif%}
                only if canProceed(id, I, pc{%-if hasStigmergy-%}, L{%endif%}{%if hasEnvironment%}, E{%endif%}) then
                tick(id);
                select
                {%- for item in schedule -%}
                    only if {% for pc in item.entry -%}(pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
                {%- for pc in item.siblings -%}
                (pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
                {%- endfor -%}
                {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %} then action{{ item.name }}[attr{%if hasStigmergy%}, l, refresh{%endif%}{%if hasEnvironment%}, setenv{%endif%}](id, !?I, !?pc{%-if hasStigmergy-%}, !?L, !?Zput, !?Zqry{%-endif-%}{%- if hasEnvironment -%}, E{%-endif-%}) end if
                {% unless forloop.last %}[]{%- endunless %}
                {%- endfor -%}
                end select;
                tick(id)
                end if
            end if
      {%if hasStigmergy%}
      []
         -- propagate: sender side
         only if length (Zput) > 0 then
            var key : Nat in
               key := any Nat where (key < SIZEOFL) and member (key, Zput)  and (key == TUPLESTART(key));
               signalPut(id);
               Zput := remove (key, Zput);
               put (id, key, L, I); -- sync with get
               doInit(id); doInit(id)
            end var
         end if
      []
             -- propagate: receiver side
             var sender : ID, key : Nat, k : nat, recL : Lstig, recI : Iface, cmp:Comparison in
                sender := any ID where (sender != id);
                signalPut(sender);
                goodLstig(?recL);
                goodIface(?recI);
                
                key := any Nat where (key < SIZEOFL) and (key == TUPLESTART(key));
                put (sender, key, recL, recI);
                use sender;
                doInit(id); -- wait for your turn
                if link (recI, I, recL, L, sender, id, key) then
                  request(key, id, sender, ?cmp);
                  if (cmp == GREATER) then
                    for k := key while k <= TUPLEEND (key) by k := k + 1 loop
                      if L[k] <> recL[k] then --20210428
                        L[k] := recL[k];
                        l (id, k, L[k], sender)
                      else i --20210428
                      end if --20210428
                    end loop;

                    Zput := insert (key, Zput);
                    Zqry := remove (key, Zqry)
                  end if
                end if;
                doInit(id)
             end var
          []
             -- confirm: sender side
             only if length (Zqry) > 0 then
                var key : Nat in
                  key := any Nat where (key < SIZEOFL) and member (key, Zqry) and (key == TUPLESTART(key));
                  signalQry(id);
                  Zqry := remove (key, Zqry);
                  qry (id, key, L, I); -- sync with resp
                  doInit(id); doInit(id)
                end var
             end if
          []
             -- confirm: receiver side
             var sender : ID, key : Nat, k : nat, recL : Lstig, recI : Iface, cmp : Comparison in
                sender := any ID where sender != id;
                signalQry(sender);
                goodLstig(?recL);
                goodIface(?recI);
                key := any Nat where (key < SIZEOFL) and (key == TUPLESTART(key));
                
                qry (sender, key, recL, recI);-- where ((Nat(sender) < MAXCOMPONENTS) and (key < SIZEOFL));  -- sync with req
                use sender;
                doInit(id); -- wait for your turn
                if link (recI, I, recL, L, sender, id, key) then
                  request(key, id, sender, ?cmp);
                  if (cmp != SAME) then
                    Zput := insert (key, Zput);
                    if cmp == GREATER then
                      for k := key while k <= TUPLEEND (key) by k := k + 1 loop
                        if L[k] <> recL[k] then --20210428
                          L[k] := recL[k];
                          l (id, k, L[k], sender)
                        else i --20210428
                        end if --20210428
                        end loop;
                      Zqry := remove (key, Zqry)
                    end if
                  end if
                end if;
                doInit(id)
             end var
         {%endif%}
          end select
        end loop
      end var
end process

process main [tick, doInit:IDchannel, attr: any{%if hasStigmergy%}, debug, put, qry, l, refresh, request : any, signalPut, signalQry:IDchannel{%endif%}{%if hasEnvironment%}, getenv, setenv: any{%endif%}] is
par
    {%if hasStigmergy%}refresh, request -> MatrixStorage[refresh, request, debug]
||{%endif%}
    {%if hasEnvironment%}getenv, setenv -> ENV[getenv, setenv]
||{%endif%}
tick, doInit -> sched [tick, doInit]
||
    tick, doInit{%if hasStigmergy%}, refresh, request{%endif%}{%if hasEnvironment%}{%if hasStigmergy%},{%endif%}getenv, setenv{%endif%} -> par
    {%for i in (1..MAXCOMPONENTS)%}
    {%if hasStigmergy%} put, qry, signalPut, signalQry ->{%endif%}
      agent [tick, doInit, attr{%if hasStigmergy%}, put, qry, l, refresh, request, signalPut, signalQry{%endif%}{%if hasEnvironment%}, getenv, setenv{%endif%}] (ID ({{forloop.index0}}))
    {%unless forloop.last%}||{%endunless%}
    {%endfor%}
    end par
end par
end process

end module
