process INITAGENT[attr, l, refresh: any] (id:ID, out var I:Iface, out var p:PC{%-if hasStigmergy-%}, out var L:Lstig{%-endif-%}) is
    var x: Int in
        I := Iface (0);
        p := PC (0);
        {%if hasStigmergy%}L := Lstig (0);{%endif%}
        {%- for agent in agents -%}
        {% unless forloop.first %}els{% endunless %}if (Nat(id) >= {{agent.start}}) and (Nat(id) < {{agent.end}}) then

        {%- for p in agent.pcs -%}
        {%- if p.value.size == 1 -%}
        p[{{ p.name }}] := {{ p.value.first }};
        {%- else -%}
        x := any Nat where {%- for val in p.value -%} (x == {{ val }}){% unless forloop.last %} or {% endunless %}{%- endfor-%};
        p[{{ p.name }}] := x;
        {%- endif -%}{%- endfor -%}

        {%- for item in agent.initvars -%}

        x := any Int where {{ item.bexpr }};
        {%- if hasStigmergy and item.loc == "L" -%}
        L[{{ item.index }}] := x;
        l(Nat(id), {{item.index}} of Nat , x);
        refresh(TUPLESTART({{item.index}}), id){%- else -%}
        {{item.loc}}[{{ item.index }}] := x;
        attr(Nat(id), {{item.index}} of Nat , x){%- endif -%}
        {%- unless forloop.last-%};{%- endunless -%}
        {%- endfor -%}
        {%- endfor -%}
        
        end if
    end var 
end process

{%- if hasEnvironment -%}
process ENV [getenv, setenv: any] is
    {%- if initenv.size > 0 -%}
    var x: Int, e:ENV, index:Nat in 
        {% for item in initenv %}
        x := any Int where {{ item.bexpr }};
        e[{{ item.index }}] := x{%- unless forloop.last-%};{%- endunless -%}
        {%- endfor -%}
    end var;
    loop
    select
        --index := any Nat where (index < {{ initenv.size }});
        --getenv(index, e[index])
        getenv(e);
        []
        setenv(?index, ?x) where (index < {{ initenv.size }});
        e[index] := x
    end select
    end loop
    {%- else -%}
    null
    {%- endif -%}
end process
{%- endif -%}
