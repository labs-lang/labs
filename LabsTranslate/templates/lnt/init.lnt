function CheckAssumes (agents:Agents) is
    {%- if assumes.size == 0 %} null
    {%- else -%}
    {%- for p in assumes -%}
    -- {{ p.name }}
    if not({{ p.value }}) then return false end if;
    {%- endfor -%}
    return true
    {%- endif -%}
end function

process INITAGENT[attrGate, l: any] (in out a:Agent{%-if hasStigmergy-%}, in out m:Matrix{%-endif-%}) is
    var I:Iface, x: Int, p:PC{%-if hasStigmergy-%}, L:Lstig{%- endif %} in
        I := a.I;
        {% if hasStigmergy %}L := a.L;{%- endif %}
        p := a.pc;

        {%- for agent in agents -%}
        {% unless forloop.first %}els{% endunless %}if (Nat(a.id) >= {{agent.start}}) and (Nat(a.id) < {{agent.end}}) then

        {%- for p in agent.pcs -%}
        {%- if p.value.size == 1 -%}
        p[{{ p.name }}] := {{ p.value.first }};
        {%- else -%}
        x := any Nat where {%- for val in p.value -%} (x == {{ val }}){% unless forloop.last %} or {% endunless %}{%- endfor-%};
        p[{{ p.name }}] := x;
        {%- endif -%}{%- endfor -%}

        {%- for item in agent.initvars -%}

        x := any Int where {{ item.bexpr }};
        {%- if hasStigmergy and item.loc == "L" -%}
        L[{{ item.index }}] := x;
        l(Nat(a.id), {{item.index}} of Nat , x);
        eval refresh(!?m, {{item.index}}, Nat(a.Id)){%- else -%}
        {{item.loc}}[{{ item.index }}] := x;
        attrGate(Nat(a.id), {{item.index}} of Nat , x){%- endif -%}
        {%- unless forloop.last-%};{%- endunless -%}
        {%- endfor -%}
        {%- endfor -%}
        
        end if;

        a := a.{I -> I{%-if hasStigmergy-%}, L -> L{%- endif -%}, pc -> p}
    end var 
end process

{%- if hasEnvironment -%}
process INITENV(in out e: Env) is
    {%- if initenv.size > 0 -%}
    var x: Int in 
        {% for item in initenv %}
        x := any Int where {{ item.bexpr }};
        e[{{ item.index }}] := x{%- unless forloop.last-%};{%- endunless -%}
        {%- endfor -%}
    end var
    {%- else -%}
    null
    {%- endif -%}
end process
{%- endif -%}
