    process step [sched:Sched] (in out sys: Sys) is
        var a:Agent, tid:ID, agents:Agents, t: Nat, E: Env in
            agents := sys.agents;
            sched(?tid) where empty(agents[Nat(tid)].Zput) and empty(agents[Nat(tid)].Zqry);

            a := agents[Nat(tid)];
            t := sys.time;
            E := sys.env;
            if a.init == false then INITAGENT(!?a, !?t) end if;

            select
            {%- for item in schedule -%}
                only if {% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
            {%- for pc in item.siblings -%}
            (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
            {%- endfor -%}
            {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %} then action{{ item.name }}(!?a, sys.time, !?e) end if
            {% unless forloop.last %}[]{%- endunless %}
            {%- endfor -%}
            end select;
            agents[Nat(tid)] := a;
            sys := sys.{ agents => agents, time => t, env => e}
        end var
    end process

    {%- if fair -%}
    process scheduler [sched: Sched] is
        var next: ID in
            next := any ID;
            loop
                sched(next);
                next := ID((Nat(next) + 1) mod MAXCOMPONENTS)
            end loop
        end var
    end process
    {%- else -%}
    process scheduler [sched: Sched] is
        var next: ID in
            loop
                next := any ID;
                sched(next)
            end loop
        end var
    end process
    {%- endif -%}


    process monitor [mon: Boolch] (agents: Agents) is
        {%- if alwaysasserts.size == 0 and finallyasserts.size == 0 -%}null
        {%- else -%}
        {%- assign cnt = agentscount | minus: 1 -%}
        if {%- for i in (0..cnt) -%}(agents[{{i}}].init) {% unless forloop.last %}and {% endunless %} {%- endfor -%}then 
            {%- for p in alwaysasserts -%}
            -- {{ p.name }}
            if not({{ p.value }}) then mon(false){%- unless simulation %}; stop{% endunless %} end if{% unless forloop.last %};{% endunless %}{%if finallyasserts.size > 0 %};{% endif %}
            {%- endfor -%}
            {%- for p in finallyasserts -%}
            -- {{ p.name }}
            if {{ p.value }} then mon(true){%- unless simulation %}; stop{% endunless %} end if{% unless forloop.last %};{% endunless %}
            {%- endfor -%}
        end if
        {%- endif -%}
    end process

    process MAIN [{%- if simulation -%}o:Any, {% endif %}monitor:Boolch] is
        var sys: Sys, agents: Agents, e:Env in
            agents := Agents(emptyAgent);
            
            var tid: Nat, a: Agent, time: Nat in
                time := 0;
                for tid := 0 while tid < MAXCOMPONENTS by tid := tid + 1 loop
                    a := agents[tid].{id => ID(tid)};
                    agents[tid] := a; i
                end loop;
                e := Env(0);
                INITENV(!?e);
                sys := Sys(agents, time, e)
            end var;

            hide sched:Sched in
                par sched in
                    scheduler [sched]
                    ||
                    loop
                        {%- if simulation -%}
                        o(sys);
                        {%- endif -%}
                        monitor[monitor](sys.agents);
                        select
                            step[sched](!?sys)
                        []
                            propagate (!?sys)
                        []
                            confirm (!?sys)
                        end select
                    end loop
                end par
            end hide
        end var
    end process

end module