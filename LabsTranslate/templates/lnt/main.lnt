process lastAgent [last: IdChannel] is
    var tid: ID in
        tid := any ID;
        loop
            last(tid);
            last(?tid)
        end loop
    end var
end process

process step [last: IdChannel, mon: Any] (in out sys: Sys) is
    var a:Agent, tid:ID, agents:Agents, t: Nat, firstAgent: Int{%- if hasEnvironment -%}, E: Env{%- endif %} in
        agents := sys.agents;

        last(?tid);
        a := agents[Nat(tid)];
        t := sys.time;
        if (a.init == false) then INITAGENT(!?a, !?t) end if;

        if canProceed(a, sys.env) then
            firstAgent := NatToInt(Nat(tid));
            E := sys.env;
            select
            {%- for item in schedule -%}
                only if {% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
            {%- for pc in item.siblings -%}
            (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
            {%- endfor -%}
            {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %} then action{{ item.name }}(!?a, sys.time, !?e) end if
            {% unless forloop.last %}[]{%- endunless %}
            {%- endfor -%}
            end select;
            agents[Nat(tid)] := a;
            sys := sys.{ agents => agents, time => t, env => e}
        else
            mon("deadlock"); stop --vacuous pass
        end if;

        --- scheduler ---
        {% if fair %}
        tid := ID(Nat(tid) + 1 mod MAXCOMPONENTS);
        {% else %}
        tid := any ID;
        {% endif %}
        last(tid) -- store tid for later retrieval
        --- end scheduler ---

    end var
end process

process monitor [mon: any] (agents: Agents) is
    {%- if alwaysasserts.size == 0 and finallyasserts.size == 0 -%}null
    {%- else -%}
    {%- assign cnt = agentscount | minus: 1 -%}
    if {%- for i in (0..cnt) -%}(agents[{{i}}].init) {% unless forloop.last %}and {% endunless %} {%- endfor -%}then 
        {%- for p in alwaysasserts -%}
        -- {{ p.name }}
        if not({{ p.value }}) then mon(false){%- unless simulation %}; stop{% endunless %} end if{% unless forloop.last %};{% endunless %}{%if finallyasserts.size > 0 %};{% endif %}
        {%- endfor -%}
        {%- for p in finallyasserts -%}
        -- {{ p.name }}
        if {{ p.value }} then mon(true){%- unless simulation %}; stop{% endunless %} end if{% unless forloop.last %};{% endunless %}
        {%- endfor -%}
    end if
    {%- endif -%}
end process

function canProceed(a: Agent, E: Env): Bool is
    var firstAgent: Int in
    firstAgent := NatToInt(Nat(a.id));
    return 
        empty(a.Zput) and empty(a.Zqry) and
        (
            {%- for item in schedule -%}
                ({% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
            {%- for pc in item.siblings -%}
            (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
            {%- endfor -%}
            {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %})
            {% unless forloop.last %}or{%- endunless %}
            {%- endfor -%}
        )
    end var
end function


process MAIN [{%- if simulation -%}o:Any, {% endif %}monitor:any] is
    var sys: Sys, agents: Agents, e:Env in
        agents := Agents(emptyAgent);
        
        var tid: Nat, a: Agent, time: Nat in
            time := 0;
            for tid := 0 while tid < MAXCOMPONENTS by tid := tid + 1 loop
                a := agents[tid].{id => ID(tid)};
                agents[tid] := a; i
            end loop;
            e := Env(0);
            INITENV(!?e);
            sys := Sys(agents, time, e)
        end var;

        hide last:IdChannel in
            par last in
                lastAgent [last]
                ||
                loop
                    {%- if simulation -%}
                    o(sys);
                    {%- endif -%}
                    monitor[monitor](sys.agents);
                    select
                        step[last, monitor](!?sys)
                    []
                        propagate (!?sys)
                    []
                        confirm (!?sys)
                    end select
                end loop
            end par
        end hide
    end var
end process

end module