process step [mon, action: any] (in out sys: Sys, tid: ID) is
    var a:Agent, agents:Agents{%-if hasStigmergy-%}, t: Nat{%-endif-%}, firstAgent: Int{%- if hasEnvironment -%}, E: Env{%- endif %} in
        agents := sys.agents;
        {% if hasStigmergy-%}t := sys.time;{%- endif -%}

        --last(?tid);
        a := agents[Nat(tid)];
        firstAgent := NatToInt(Nat(tid));
        {%if hasEnvironment -%}E := sys.env;{%- endif %}

        {%- if simulation -%}
        if canProceed(a{%- if hasEnvironment -%}, sys.env{%-endif-%}) then
            select
            {%- for item in schedule -%}
                only if {% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
            {%- for pc in item.siblings -%}
            (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
            {%- endfor -%}
            {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %} then action{{ item.name }}[action](!?a{%-if hasStigmergy-%}, sys.time{%-endif-%}{%- if hasEnvironment -%}, !?e{%-endif-%}) end if
            {% unless forloop.last %}[]{%- endunless %}
            {%- endfor -%}
            end select
        end if;
        {%- else -%}
        {% if hasStigmergy %}assume[mon](empty(a.Zput) and empty(a.Zqry));{% endif %}
        select
        {%- for item in schedule -%}
            assume[mon]({% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
        {%- for pc in item.siblings -%}
        (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
        {%- endfor -%}
        {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %}); action{{ item.name }}[action](!?a{%-if hasStigmergy-%}, sys.time{%-endif-%}{%- if hasEnvironment -%}, !?e{%-endif-%})
        {% unless forloop.last %}[]{%- endunless %}
        {%- endfor -%}
        end select;
        {%- endif -%}
    
        agents[Nat(tid)] := a;
        sys := sys.{ agents => agents{%-if hasStigmergy-%}, time => incr(t){%-endif-%}{%- if hasEnvironment -%}, env => e{%-endif-%}}

    end var
end process

process monitor [mon: any] (agents: Agents) is
    {%- if alwaysasserts.size == 0 and finallyasserts.size == 0 %} null
    {%- else -%}
    --{%- assign cnt = agentscount | minus: 1 -%}
    --if {%- for i in (0..cnt) -%}(agents[{{i}}].init) {% unless forloop.last %}and {% endunless %} {%- endfor -%}then 
    {%- for p in alwaysasserts -%}
    -- {{ p.name }}
    if not({{ p.value }}) then mon(false){%- unless simulation %}; stop{% endunless %} end if{% unless forloop.last %};{% endunless %}{%if finallyasserts.size > 0 %};{% endif %}
    {%- endfor -%}
    {%- for p in finallyasserts -%}
    -- {{ p.name }}
    if {{ p.value }} then mon(true){%- unless simulation %}; stop{% endunless %} end if{% unless forloop.last %};{% endunless %}
    {%- endfor -%}
    --end if
    {%- endif -%}
end process

function canProceed(a: Agent{%- if hasEnvironment -%}, E: Env{%- endif -%}): Bool is
    var firstAgent: Int in
    firstAgent := NatToInt(Nat(a.id));
    return 
        {% if hasStigmergy -%}empty(a.Zput) and empty(a.Zqry) and {%- endif %}
        (
            {%- for item in schedule -%}
                ({% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
            {%- for pc in item.siblings -%}
            (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
            {%- endfor -%}
            {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %})
            {% unless forloop.last %}or{%- endunless %}
            {%- endfor -%}
        )
    end var
end function

function existsEnabledAgent (sys: Sys): Bool is
    var n: Nat in
        for n := 0 while (n < MAXCOMPONENTS) by n := n + 1 loop
            if canProceed(sys.agents[n]{%- if hasEnvironment -%}, sys.env{%- endif -%}) then
                return true
            end if
        end loop;
        return false
    end var
end function

{% if hasStigmergy %}
function existsSystemTransition(sys: Sys): Bool is
    var n: Nat in
        for n := 0 while (n < MAXCOMPONENTS) by n := n + 1 loop
            if not(empty(sys.agents[n].Zput)) or not(empty(sys.agents[n].Zqry)) then
                return true
            end if
        end loop;
        return false
    end var
end function
{% endif %}

process MAIN [monitor, action: any] is
    var sys: Sys, tid: ID, agents: Agents{%- if hasEnvironment -%}, e:Env{%- endif %}{%-if hasStigmergy-%}, t:Nat{%- endif %} in
        agents := Agents(emptyAgent);
        {% if hasStigmergy-%}t := 0;{%- endif -%}
        
        var i: Nat, a: Agent in
            for i := 0 while i < MAXCOMPONENTS by i := i + 1 loop
                a := agents[i].{id => ID(i)};
                INITAGENT(!?a{%-if hasStigmergy-%}, !?t{%- endif -%});
                agents[i] := a;
                action(a)
            end loop;
            {%- if hasEnvironment -%}
            e := Env(0);
            INITENV(!?e);
            action(e);
            sys := Sys(agents{%-if hasStigmergy-%}, t{%-endif-%}, e)
            {%- else -%}
            sys := Sys(agents{%-if hasStigmergy-%}, t{%-endif-%})
            {%- endif -%}
        end var;

        -- select 1st agent
        tid := {% if firstagent == 0 %} 0{% else %}any ID{%-endif-%};

        loop
            monitor[monitor](sys.agents);
            {% if hasStigmergy %}
            {%- if simulation -%}
            if not(existsEnabledAgent(sys)) and not(existsSystemTransition(sys)) then
                monitor("deadlock"); stop
            end if;
            {%- endif -%}
            select
                step[monitor, action](!?sys, tid)
            []
                propagate [action] (!?sys)
            []
                confirm [action] (!?sys)
            end select;
            {%- else -%}
            {%- if simulation -%}
            if not(existsEnabledAgent(sys)) then
                monitor("deadlock"); stop
            end if;
            {%- endif -%}
            step[monitor, action](!?sys, tid);
            {%- endif -%}
            --- scheduler ---
            tid := {% if fair %}ID(Nat(tid) + 1 mod MAXCOMPONENTS){% else %}any ID{% endif %}
            --- end scheduler ---
        end loop
    end var
end process

end module