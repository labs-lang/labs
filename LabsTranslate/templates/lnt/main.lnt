{%-if simulation-%}
function canProceed(a:Agent{%- if hasEnvironment -%}, e:Env{%-endif-%}): Bool is
    var tid: ID in
    tid := a.id;
    return {% if hasStigmergy -%}(empty(a.Zput) and empty(a.Zqry)) and {% endif-%} 
        ({%- for item in schedule -%}
        ({% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
        {%-for pc in item.siblings -%}
        (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
        {%- endfor -%}
        {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %})
        {% unless forloop.last -%} or {%- endunless -%}
        {%- endfor -%})
    end var
end function

function existsEnabled(agents:Agents{%- if hasEnvironment -%}, e:Env{%-endif-%}): Bool is
    var i:Nat in
        for i := 0 while i < MAXCOMPONENTS by i := i + 1 loop
            if canProceed(agents[i]{%- if hasEnvironment -%}, e{%-endif-%}) then return true end if
        end loop
    end var;
    return false
end function
{%-endif-%}

process step [attrGate, l: any, spurious:None] (in out sys: Sys, tid: ID) is
    var a:Agent, agents:Agents{%-if hasStigmergy-%}, mat: Matrix{%-endif-%}, firstAgent: Int{%- if hasEnvironment -%}, E: Env{%- endif %} in
        agents := sys.agents;
        {% if hasStigmergy-%}mat := sys.m;{%- endif -%}

        --last(?tid);
        a := agents[Nat(tid)];
        firstAgent := NatToInt(Nat(tid));
        {%if hasEnvironment -%}E := sys.env;{%- endif %}

        {%- if simulation -%}
        if canProceed(a{%- if hasEnvironment -%}, sys.env{%-endif-%}) then
            select
            {%- for item in schedule -%}
                only if {% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
            {%- for pc in item.siblings -%}
            (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
            {%- endfor -%}
            {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %} then action{{ item.name }}[attrGate, l](!?a{%-if hasStigmergy-%}, sys.time{%-endif-%}{%- if hasEnvironment -%}, !?e{%-endif-%}) end if
            {% unless forloop.last %}[]{%- endunless %}
            {%- endfor -%}
            end select
        end if;
        {%- else -%}
        --select
        {%- for item in schedule -%}
        {%unless forloop.first%}els{%endunless%}if {% if hasStigmergy -%}(empty(a.Zput) and empty(a.Zqry)) and {% endif-%} 
        ({% for pc in item.entry -%}(a.pc[{{pc.name}}] == {{pc.value}}){% unless forloop.last %} and {% endunless %}{%- endfor -%}{%- if item.siblings.size != 0 -%} and
        {%-for pc in item.siblings -%}
        (a.pc[{{pc}}] {%-if item.name contains 'last'-%}=={%- else -%}!={%- endif -%} 0){% unless forloop.last %} and {% endunless %}
        {%- endfor -%}
        {%- endif -%}{% if item.guards.size > 0 %} and {{ item.guards | join: ' and ' }}{% endif %}) then action{{ item.name }}[attrGate, l](!?a{%-if hasStigmergy-%}, !?mat{%-endif-%}{%- if hasEnvironment -%}, !?e{%-endif-%})
        {%- endfor -%}
        else spurious; stop
        end if;
        --end select;
        {%- endif -%}
    
        agents[Nat(tid)] := a;
        sys := sys.{ agents -> agents{%-if hasStigmergy-%}, m -> mat{%-endif-%}{%- if hasEnvironment -%}, env -> e{%-endif-%}}

    end var
end process

process MAIN [attr, l: any, spurious,endInit:None] is
    var sys: Sys, tid: ID in
        var agents: Agents{%- if hasEnvironment -%}, e:Env{%- endif %}{%-if hasStigmergy-%}, m:Matrix{%- endif %} in
            agents := Agents(emptyAgent);
            {% if hasStigmergy-%}m := Matrix(MatrixVar(SAME));{%- endif -%}
        
            var i: Nat, a: Agent in
                for i := 0 while i < MAXCOMPONENTS by i := i + 1 loop
                    a := agents[i].{id -> ID(i)};
                    INITAGENT[attr, l](!?a{%-if hasStigmergy-%}, !?m{%- endif -%});
                    agents[i] := a--;
                    --action(a)
                end loop;
                {%- if hasEnvironment -%}
                e := Env(0);
                INITENV(!?e);
                sys := Sys(agents{%-if hasStigmergy-%}, m{%-endif-%}, e)
                {%- else -%}
                sys := Sys(agents{%-if hasStigmergy-%}, m{%-endif-%})
                {%- endif -%}
            end var
        end var;
        endInit;

        -- select 1st agent
        tid := {% if firstagent == 0 %} 0{% else %}any ID{%-endif-%};

        loop
            --monitor[monitor](sys.agents);
            {% if hasStigmergy %}
            select
                    --- scheduler ---
                tid := {% if fair %}ID((Nat(tid) + 1) mod MAXCOMPONENTS){% else %}any ID{% endif %};
                --- end scheduler ---
                step[attr, l, spurious](!?sys, tid)
            []
                propagate [l] (!?sys)
            []
                confirm [l] (!?sys)
            end select
            {%-else-%}
            step[attr, l, spurious](!?sys, tid);
            --- scheduler ---
            tid := {% if fair %}ID((Nat(tid) + 1) mod MAXCOMPONENTS){% else %}any ID{% endif %}
            --- end scheduler ---
            {%-endif-%}
        end loop
    end var
end process

end module
