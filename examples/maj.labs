# Adapted from 
# https://peregrine.model.in.tum.de/demo/

# Original description:
# This protocol takes a majority vote. More precisely, it (attempts to) compute
# whether there are initially more agents in state Y than N. The protocol has
# only 3 states, but does not always converge to the correct consensus.
# Described in Dana Angluin, James Aspnes and David Eisenstat. A Simple
# Population Protocol for Fast Robust Approximate Majority. Distributed
# Computing, vol. 21, issue 2, pp. 87â€“102, 2008.

# 0 = N, 1 = Y, 2 = n, 3 = y

system {
    extern = _yes, _no
    environment = agent: -1
    spawn = Yes: _yes, No: _no
    Protocol = (
      # Free to move
      (agent = -1 ->
        {
          p[] := pick 1;
          # signal meeting
          agent <-- 
            if state = 0 and (state of p[0]) = 1 then p[0] else
            if state = 1 and (state of p[0]) = 0 then p[0]
            else agent;
          state <-
            if (state of p[0]) = 1 and state = 0 then 2 # YN -> yn
            else if (state of p[0]) = 0 and state = 1 then 3 # NY -> ny
            else if (state of p[0]) = 0 and state = 3 then 2 # Ny -> Nn
            else if (state of p[0]) = 1 and state = 2 then 3 #Yn -> Yy
            else if (state of p[0]) = 3 and state = 2 then 3 #yn -> yy
            else state
        }
      )
      ++
      # Update Y to y after meeting a N (or N to n after meeting Y)
      (agent = id -> {state <- state+2; agent <-- -1})
    ) ; Protocol
}

agent Yes {
    interface = state: 1
  
    Behavior = Protocol
}

agent No {
    interface = state: 0
  
    Behavior = Protocol
}

check {
    NoYConsensus = always exists Yes y, exists No n,
    (state of y = 0 or state of y = 2)
    or 
    (state of n = 0 or state of n = 2)
}
