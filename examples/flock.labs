system {
    extern = _birds, _grid, _delta
    spawn = Bird: _birds

    
}

stigmergy Alignment {
    link =
        ((x of c1 - x of c2) * (x of c1 - x of c2)) + 
        ((y of c1 - y of c2) * (y of c1 - y of c2)) <= _delta * _delta

    <dirx: [-1, 1], diry: [-1, 1]>

}

stigmergy Cohesion {
    link =
        ((x of c1 - x of c2) * (x of c1 - x of c2)) + 
        ((y of c1 - y of c2) * (y of c1 - y of c2)) > _delta * _delta

    <posx: undef, posy: undef>
}

agent Bird {
    interface = x: 0.._grid, y: 0.._grid
    stigmergies = Alignment, Cohesion
    
    # "Local" processes (can only be used by component Bird)
    Behavior = (Move || Attract); Behavior

    Move = x <- (x + dirx) % _grid ++ y <- (y + diry) % _grid

    Attract = 
        posx, posy <~ x;
        ((posx != x -> dirx <~ (x - posx) / abs(x-posx))
        ++
        (posy != y -> diry <~ (y - posy) / abs(y-posy))
        ++
        (posx = x and posy = y -> Skip)
        )
}

check {
    Consensus = finally forall Bird b1, forall Bird b2, 
        dirx of b1 = dirx of b2
        and
        diry of b1 = diry of b2
}